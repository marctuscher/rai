/*  ------------------------------------------------------------------
    Copyright (c) 2019 Marc Toussaint
    email: marc.toussaint@informatik.uni-stuttgart.de

    This code is distributed under the MIT License.
    Please see <root-path>/LICENSE for details.
    --------------------------------------------------------------  */

// Generated by gencpp from file rai_msgs/MotionFeedback.msg
// DO NOT EDIT!

#ifndef RAI_MSGS_MESSAGE_MOTIONFEEDBACK_H
#define RAI_MSGS_MESSAGE_MOTIONFEEDBACK_H

#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

namespace rai_msgs {
template <class ContainerAllocator>
struct MotionFeedback_ {
  typedef MotionFeedback_<ContainerAllocator> Type;

  MotionFeedback_()
    : stamp()
    , timeToGo(0.0)
    , phaseVel(0.0)
    , trackingError(0.0)
    , jointsInLimit()
    , collisionPairs()  {
  }
  MotionFeedback_(const ContainerAllocator& _alloc)
    : stamp()
    , timeToGo(0.0)
    , phaseVel(0.0)
    , trackingError(0.0)
    , jointsInLimit(_alloc)
    , collisionPairs(_alloc)  {
    (void)_alloc;
  }

  typedef ros::Time _stamp_type;
  _stamp_type stamp;

  typedef double _timeToGo_type;
  _timeToGo_type timeToGo;

  typedef double _phaseVel_type;
  _phaseVel_type phaseVel;

  typedef double _trackingError_type;
  _trackingError_type trackingError;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >, typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >>::other >  _jointsInLimit_type;
  _jointsInLimit_type jointsInLimit;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >, typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >>::other >  _collisionPairs_type;
  _collisionPairs_type collisionPairs;

  typedef boost::shared_ptr< ::rai_msgs::MotionFeedback_<ContainerAllocator>> Ptr;
  typedef boost::shared_ptr< ::rai_msgs::MotionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MotionFeedback_

typedef ::rai_msgs::MotionFeedback_<std::allocator<void>> MotionFeedback;

typedef boost::shared_ptr< ::rai_msgs::MotionFeedback > MotionFeedbackPtr;
typedef boost::shared_ptr< ::rai_msgs::MotionFeedback const> MotionFeedbackConstPtr;

// constants requiring out of line definition

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rai_msgs::MotionFeedback_<ContainerAllocator>& v) {
  ros::message_operations::Printer< ::rai_msgs::MotionFeedback_<ContainerAllocator>>::stream(s, "", v);
  return s;
}

} // namespace rai_msgs

namespace ros {
namespace message_traits {

// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg'], 'rai_msgs': ['/home/mtoussai/git/LGP-execution/rai/rai/RosCom/rai_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']

template <class ContainerAllocator>
struct IsFixedSize< ::rai_msgs::MotionFeedback_<ContainerAllocator>>
      : FalseType
{ };

template <class ContainerAllocator>
struct IsFixedSize< ::rai_msgs::MotionFeedback_<ContainerAllocator> const>
  : FalseType
{ };

template <class ContainerAllocator>
struct IsMessage< ::rai_msgs::MotionFeedback_<ContainerAllocator>>
      : TrueType
{ };

template <class ContainerAllocator>
struct IsMessage< ::rai_msgs::MotionFeedback_<ContainerAllocator> const>
  : TrueType
{ };

template <class ContainerAllocator>
struct HasHeader< ::rai_msgs::MotionFeedback_<ContainerAllocator>>
      : FalseType
{ };

template <class ContainerAllocator>
struct HasHeader< ::rai_msgs::MotionFeedback_<ContainerAllocator> const>
  : FalseType
{ };

template<class ContainerAllocator>
struct MD5Sum< ::rai_msgs::MotionFeedback_<ContainerAllocator>> {
  static const char* value() {
    return "4061c02864a47cfda7434e541eaaa498";
  }

  static const char* value(const ::rai_msgs::MotionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4061c02864a47cfdULL;
  static const uint64_t static_value2 = 0xa7434e541eaaa498ULL;
};

template<class ContainerAllocator>
struct DataType< ::rai_msgs::MotionFeedback_<ContainerAllocator>> {
  static const char* value() {
    return "rai_msgs/MotionFeedback";
  }

  static const char* value(const ::rai_msgs::MotionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rai_msgs::MotionFeedback_<ContainerAllocator>> {
  static const char* value() {
    return "time stamp\n\
float64 timeToGo\n\
float64 phaseVel\n\
float64 trackingError\n\
string[] jointsInLimit\n\
string[] collisionPairs\n\
";
  }

  static const char* value(const ::rai_msgs::MotionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros {
namespace serialization {

template<class ContainerAllocator> struct Serializer< ::rai_msgs::MotionFeedback_<ContainerAllocator>> {
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m) {
    stream.next(m.stamp);
    stream.next(m.timeToGo);
    stream.next(m.phaseVel);
    stream.next(m.trackingError);
    stream.next(m.jointsInLimit);
    stream.next(m.collisionPairs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct MotionFeedback_

} // namespace serialization
} // namespace ros

namespace ros {
namespace message_operations {

template<class ContainerAllocator>
struct Printer< ::rai_msgs::MotionFeedback_<ContainerAllocator>> {
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rai_msgs::MotionFeedback_<ContainerAllocator>& v) {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "timeToGo: ";
    Printer<double>::stream(s, indent + "  ", v.timeToGo);
    s << indent << "phaseVel: ";
    Printer<double>::stream(s, indent + "  ", v.phaseVel);
    s << indent << "trackingError: ";
    Printer<double>::stream(s, indent + "  ", v.trackingError);
    s << indent << "jointsInLimit[]" << std::endl;
    for(size_t i = 0; i < v.jointsInLimit.size(); ++i) {
      s << indent << "  jointsInLimit[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >>::stream(s, indent + "  ", v.jointsInLimit[i]);
    }
    s << indent << "collisionPairs[]" << std::endl;
    for(size_t i = 0; i < v.collisionPairs.size(); ++i) {
      s << indent << "  collisionPairs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >>::stream(s, indent + "  ", v.collisionPairs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAI_MSGS_MESSAGE_MOTIONFEEDBACK_H
